#version 460
#extension GL_EXT_ray_tracing: require

#include "RayTracingGlobal.glsl"

layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = 0, binding = 1, rgba32f) uniform image2D image;

layout (location = 0) rayPayloadEXT hitPayLoad payload;

void main()
{
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    vec4 origin = ubo.inverseViewMatrix * vec4(0, 0, 0, 1);
    vec4 target = ubo.inverseProjectionMatrix * vec4(d, 1, 1);
    vec4 direction = ubo.inverseViewMatrix * vec4(normalize(target.xyz), 0);
    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;
    
    traceRayEXT(topLevelAS, // acceleration structure
                rayFlags,       // rayFlags
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                origin.xyz,     // ray origin
                tMin,           // ray min range
                direction.xyz,  // ray direction
                tMax,           // ray max range
                0               // payload (location = 0)
    );
    
//    vec3 hitValue = vec3(ubo1.curTime,0,0);
//    vec3 hitValue = target.xyz;
//    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.hitValue, 1.0));
}
