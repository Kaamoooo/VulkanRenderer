#version 460
#extension GL_EXT_ray_tracing: require

#include "RayTracingGlobal.glsl"
#include "../Utils/random.glsl"

layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout (set = 0, binding = 1, rgba8) uniform image2D image;

layout (location = 0) rayPayloadEXT hitPayLoad payload;

void main()
{
    //payload.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, ubo.frameIndex);
    ////  float r1 = rnd(payload.seed);
    // float r2 = rnd(payload.seed);
    // vec2 subpixelJitter = ubo.frameIndex == 0 ? vec2(0.5, 0.5) : vec2(r1, r2);
    // const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixelJitter;

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5f, 0.5f);
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    vec4 origin = ubo.inverseViewMatrix * vec4(0, 0, 0, 1);
    vec4 target = ubo.inverseProjectionMatrix * vec4(d, 1, 1);
    vec4 direction = ubo.inverseViewMatrix * vec4(normalize(target.xyz), 0);
    uint rayFlags = gl_RayFlagsNoneEXT;
    float tMin = 0.001;
    float tMax = 10000.0;

    payload.opacity = 0;
    payload.hitValue = vec3(0.0, 0.0, 0.0);
    
    traceRayEXT(topLevelAS, // acceleration structure
                rayFlags, // rayFlags
                0xFF, // cullMask
                0, // sbtRecordOffset
                0, // sbtRecordStride
                0, // missIndex
                origin.xyz, // ray origin
                tMin, // ray min range
                direction.xyz, // ray direction
                tMax, // ray max range
                0               // payload (location = 0)
    );
    vec3 gammaColor = pow(payload.hitValue, vec3(1.0f/2.2));
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(gammaColor, 1.0));

}
